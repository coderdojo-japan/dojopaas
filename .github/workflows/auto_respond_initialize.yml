name: サーバー初期化依頼への自動応答

on:
  issues:
    types: [opened]

jobs:
  check_and_respond:
    # Issue タイトルに「初期化依頼」が含まれている場合のみ実行
    if: contains(github.event.issue.title, '初期化依頼')
    runs-on: ubuntu-latest
    
    permissions:
      issues: write
      contents: read
    
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v3
      
      - name: Ruby環境をセットアップ
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      
      - name: Issue本文からIPアドレスを抽出
        id: extract_ip
        run: |
          # Issue本文を抽出
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          # IPアドレスパターンを抽出（数字とドットのみ）
          IP_ADDRESS=$(echo "$ISSUE_BODY" | grep -oE '\b([0-9]{1,3}\.){3}[0-9]{1,3}\b' | head -1)
          
          if [ -z "$IP_ADDRESS" ]; then
            echo "❌ Issue本文にIPアドレスが見つかりませんでした"
            echo "ip_found=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "📍 IPアドレスを発見: $IP_ADDRESS"
          echo "ip_address=$IP_ADDRESS" >> $GITHUB_OUTPUT
          echo "ip_found=true"          >> $GITHUB_OUTPUT
      
      - name: IPアドレスを検証してサーバー情報を検索
        if: steps.extract_ip.outputs.ip_found == 'true'
        id: find_server
        env:
          SACLOUD_ACCESS_TOKEN:        ${{ secrets.SACLOUD_ACCESS_TOKEN }}
          SACLOUD_ACCESS_TOKEN_SECRET: ${{ secrets.SACLOUD_ACCESS_TOKEN_SECRET }}
          IP_ADDRESS:                  ${{ steps.extract_ip.outputs.ip_address }}
          CI: true
        run: |
          # IP検証付きのRakeタスクを使用
          OUTPUT=$(bundle exec rake server:find_for_initialization 2>&1) || EXIT_CODE=$?
          
          # GitHub Actions用に出力をエスケープ
          OUTPUT="${OUTPUT//'%'/'%25'}"
          OUTPUT="${OUTPUT//$'\n'/'%0A'}"
          OUTPUT="${OUTPUT//$'\r'/'%0D'}"
          
          if [ -z "$EXIT_CODE" ] || [ "$EXIT_CODE" = "0" ]; then
            echo "server_found=true" >> $GITHUB_OUTPUT
            echo "server_info<<EOF" >> $GITHUB_OUTPUT
            echo "$OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "server_found=false" >> $GITHUB_OUTPUT
            echo "error_message<<EOF" >> $GITHUB_OUTPUT
            echo "$OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Issueにコメント - サーバーが見つかった場合
        if: |
          steps.extract_ip.outputs.ip_found      == 'true' &&
          steps.find_server.outputs.server_found == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const serverInfo = `${{ steps.find_server.outputs.server_info }}`.replace(/%0A/g, '\n').replace(/%0D/g, '\r').replace(/%25/g, '%');
            
            const comment = `## 🔍 サーバー情報を確認しました
            
            ${serverInfo}
            
            ---
            
            ### 📋 次のステップ
            
            @yasulab このサーバーを初期化する場合は、以下のコマンドを実行してください：
            
            \`\`\`bash
            # 1. サーバーを削除
            ruby scripts/initialize_server.rb --delete ${{ steps.extract_ip.outputs.ip_address }} --force
            
            # 2. 空コミットでCI/CDを実行（新サーバー作成）
            git commit --allow-empty -m "Fix #${{ github.event.issue.number }}: Initialize server for ${{ github.event.issue.user.login }}"
            git push
            \`\`\`
            
            ⚠️ **注意**: サーバー削除は取り消せません。削除前に必ず確認してください。
            `;
            
            await github.rest.issues.createComment({
              owner:        context.repo.owner,
              repo:         context.repo.repo,
              issue_number: context.issue.number,
              body:         comment
            });
      
      - name: Issueにコメント - サーバーが見つからなかった場合
        if: |
          steps.extract_ip.outputs.ip_found      == 'true' &&
          steps.find_server.outputs.server_found == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            const errorMessage = `${{ steps.find_server.outputs.error_message }}`.replace(/%0A/g, '\n').replace(/%0D/g, '\r').replace(/%25/g, '%');
            
            const comment = `## ❌ サーバー情報の取得に失敗しました
            
            IPアドレス: \`${{ steps.extract_ip.outputs.ip_address }}\`
            
            ### エラー詳細
            \`\`\`
            ${errorMessage}
            \`\`\`
            
            @yasulab 手動での確認が必要です。
            
            ### 確認コマンド
            \`\`\`bash
            ruby scripts/initialize_server.rb --find ${{ steps.extract_ip.outputs.ip_address }}
            \`\`\`
            `;
            
            await github.rest.issues.createComment({
              owner:        context.repo.owner,
              repo:         context.repo.repo,
              issue_number: context.issue.number,
              body:         comment
            });
      
      - name: Issueにコメント - IPアドレスが見つからなかった場合
        if: steps.extract_ip.outputs.ip_found == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            const comment = `## ⚠️ IPアドレスが見つかりませんでした
            
            Issueの本文からIPアドレスを抽出できませんでした。
            
            ### 正しいフォーマット例
            \`\`\`
            CoderDojo【道場名】の【申請者名】です。
            サーバー（IPアドレス：192.168.1.1）の初期化をお願いします。
            \`\`\`
            
            @yasulab 手動での確認をお願いします。
            `;
            
            await github.rest.issues.createComment({
              owner:        context.repo.owner,
              repo:         context.repo.repo,
              issue_number: context.issue.number,
              body:         comment
            });
